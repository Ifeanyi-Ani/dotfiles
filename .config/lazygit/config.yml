gui:
  theme:
    activeBorderColor:
      - "#FF5555" # urgent-bg-color
      - bold
    inactiveBorderColor:
      - "#BFBFBF" # inactive-text-color
    optionsTextColor:
      - "#8BE9FD" # Dracula cyan
    selectedLineBgColor:
      - "#44475A" # inactive-bg-color
    selectedRangeBgColor:
      - "#44475A" # inactive-bg-color
    cherryPickedCommitBgColor:
      - "#FFB86C" # Dracula orange
    cherryPickedCommitFgColor:
      - "#282A36" # bg-color
    unstagedChangesColor:
      - "#FF5555" # urgent-bg-color
    showListFooter: true
    showRandomTip: true
    showBottomLine: true
  nerdFontsVersion: "3"
  showIcons: true
  showFileTree: true
  expandFocusedSidePanel: true
  sidePanelWidth: 0.3333
  mainPanelSplitMode: "flexible"
  language: "en"
  timeFormat: "02 Jan 06 15:04 MST"
  shortTimeFormat: "15:04"
git:
  paging:
    colorArg: always
    pager: delta --dark --paging=never --24-bit-color=never -- --theme='Dracula'
  log:
    order: "topo-order"
    showGraph: "always"
    showWholeGraph: false
  commitPrefixes:
    learning_dart_flutter:
      pattern: "^\\w+\\/(\\w+[^-]*-[^-]*)"
      replace: "[$1] "
    blog-backend:
      pattern: "\\w+\\/(\\w+[^-]*-[^-]*)"
      replace: "[$1] "
    orbis:
      pattern: "\\w+\\/(\\w+[^-]*-[^-]*)"
      replace: "[$1] "
    orbis-backend:
      pattern: "\\w+\\/(\\w+[^-]*-[^-]*)"
      replace: "[$1] "
    withread:
      pattern: "\\w+\\/(\\w+[^-]*-[^-]*)"
      replace: "[$1] "
    withread-local:
      pattern: "\\w+\\/(\\w+[^-]*-[^-]*)"
      replace: "[$1] "
  autoFetch: true
  branchLogCmd: "git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --"
  allBranchesLogCmd: "git log --graph --all --color=always --abbrev-commit --decorate --date=relative  --pretty=medium"
  overrideGpg: false
  disableForcePushing: true
os:
  editCommand: "nvim"
  editCommandTemplate: "{{editor}} {{filename}}"
  openCommand: "xdg-open {{filename}}"
refresher:
  refreshInterval: 3
  fetchInterval: 300
update:
  method: prompt
  days: 14
reporting: "on"
notARepository: "skip"
confirmOnQuit: false
quitOnTopLevelReturn: false
promptToReturnFromSubprocess: false
keybinding:
customCommands:
  - key: "b"
    prompts:
      - type: "menu"
        title: "What kind of branch is it? (from {{ index .SelectedLocalBranch.Name }})"
        options:
          - name: "bug"
            value: "bug"
          - name: "feature"
            value: "feat"
          - name: "hotfix"
            value: "fix"
            description: "If there is a need to fix a blocker, do a temporary patch, apply a critical framework or configuration change that should be handled immediately."
          - name: "update"
            value: "update"
            description: "Any new feature or idea that is not part of a release or a sprint. A branch for playing around."
          - name: "chore"
            value: "chore"
            description: "Non-feature, non-bugfix work that doesn't add new functionality, such as updating dependencies or fixing build scripts."
          - name: "refactor"
            value: "refac"
            description: "Refactoring existing code without changing its functionality."
      - type: "input"
        title: "What is the {{ index .PromptResponses 0 }} ID?"
        initialValue: ""
    command: "git checkout -b {{ index .PromptResponses 0 }}/{{ index .PromptResponses 1 }}"
    context: "localBranches"
    loadingText: "creating branch"
  - key: "<c-t>"
    context: "files"
    prompts:
      - type: "menu"
        title: "Select commit type"
        options:
          - name: "‚ú® feat: New feature"
            value: "feat"
          - name: "üêõ fix: Bug fix"
            value: "fix"
          - name: "‚ôªÔ∏è refactor: Code refactoring"
            value: "refactor"
          - name: "üìù docs: Documentation"
            value: "docs"
          - name: "‚úÖ test: Testing"
            value: "test"
          - name: "‚ö° perf: Performance"
            value: "perf"
      - type: "input"
        title: "Enter commit message"
    command: 'git commit -m "{{index .PromptResponses 0}}: {{index .PromptResponses 1}}"'
    loadingText: "creating commit..."
  - key: "C"
    command: "git cz"
    context: "files"
    loadingText: "Opening Commitizen prompt"
    description: "commit with commitizen"
  - key: "<c-f>"
    command: "git fetch --all"
    context: "global"
    loadingText: "Fetching"
    description: "fetch from all remotes"
